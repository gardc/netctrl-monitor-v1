name: "create-dev-build"
on:
  workflow_dispatch:

jobs:
  package:
    strategy:
      matrix:
        platform: [ windows-latest, macos-latest, ubuntu-latest ]
        go-version: [1.18]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2

      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./frontend/package.json').version")" >> $GITHUB_ENV

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - name: Import Code-Signing Certificates for macOS
        if: matrix.platform == 'macos-latest'
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          # The certificates in a PKCS12 file encoded as a base64 string
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          # The password used to import the PKCS12 file.
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}

      - name: setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: build frontend
        env:
          REACT_APP_NETCTRL_REMOTE_URL: "https://dev.netctrl.io"
        run: |
          cd frontend
          yarn
          yarn build

      - name: Get Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: MacOS install gon for code signing and app notarization
        if: matrix.platform == 'macos-latest'
        run: |
          brew install mitchellh/gon/gon

      - name: Build and Sign MacOS Binaries
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        run: |
          chmod +x ./build-macos.sh
          ./build-macos.sh

      #      - name: Build package linux
      #        run: |
      #         export PATH=$PATH:$(go env GOPATH)/bin
      #         echo "building on ${{ matrix.os }}"
      #         echo ${{ env.GITHUB_REF }}
      #         echo ${{ env.GITHUB_HEAD_REF }}
      #         mkdir -p ~/.wails
      #         cp wails.json ~/.wails/
      #         export LOG_LEVEL=debug
      #         export GODEBUG=1
      #         wails build
      #         tar -czvf riftshare.tar.gz ./build/riftshare
      #         # wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
      #         # chmod +x linuxdeploy*.AppImage
      #         # ls ./
      #         # ./linuxdeploy*.AppImage --appdir AppDir --executable ./build/riftshare --desktop-file=riftshare.AppImage.desktop --icon-file=appicon--512.png --output appimage
      #        if: matrix.os == 'ubuntu-latest'
      - name: Build and package for Linux
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get install libwebkit2gtk-4.0-dev libgtk-3-dev -y
          wails build -platform linux/amd64
          tar -czvf monitor-deb-amd64.tar.gz ./build/bin/Monitor

      - name: Build package for Windows
        if: matrix.platform == 'windows-latest'
        run: |
          $GP = (go env GOPATH)
          $env:path = "$env:path;$GP\bin"
          echo "building on ${{ matrix.os }}"
          choco install mingw
          choco install nsis
          wails build -platform windows/amd64 -clean -nsis

      - name: Sign Windows binaries
        if: matrix.platform == 'windows-latest'
        run: |
          echo "Creating certificate file"
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate\certificate.txt -Value '${{ secrets.WIN_SIGNING_CERT }}'
          certutil -decode certificate\certificate.txt certificate\certificate.pfx
          echo "Signing Monitor and Monitor Installer"
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe' sign /fd sha256 /tr http://ts.ssl.com /f certificate\certificate.pfx /p '${{ secrets.WIN_SIGNING_CERT_PASSWORD }}' .\build\bin\Monitor.exe
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe' sign /fd sha256 /tr http://ts.ssl.com /f certificate\certificate.pfx /p '${{ secrets.WIN_SIGNING_CERT_PASSWORD }}' .\build\bin\Monitor-amd64-installer.exe


      - name: upload artifacts macOS
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v2
        with:
          name: monitor-macos
          path: monitor-*.zip

      - name: upload artifact windows
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: monitor-windows
          path: .\build\bin\*.exe

      - name: upload artifact ubuntu
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: monitor-ubuntu
          path: monitor-deb-amd64.tar.gz

  release:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Download Windows artifacts
        uses: actions/download-artifact@v2
        with:
          name: monitor-windows
      - name: Download macOS artifacts
        uses: actions/download-artifact@v2
        with:
          name: monitor-macos
      - name: Download ubuntu artifacts
        uses: actions/download-artifact@v2
        with:
          name: monitor-ubuntu

      - name: Unzip and move files for DO spaces
        run: |
          mkdir -p bin/darwin/amd64
          mkdir -p bin/darwin/arm64
          mkdir -p bin/windows/amd64
          mkdir -p bin/linux/amd64
          echo "Directory contents:"
          ls
          unzip ./monitor-darwin-amd64.zip -d bin/darwin/amd64
          unzip ./monitor-darwin-arm64.zip -d bin/darwin/arm64
          cp ./*.exe bin/windows/amd64
          cp monitor-deb-amd64.tar.gz bin/linux/amd64

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          name: Monitor dev build v${{ env.PACKAGE_VERSION }}
          files: |
            Monitor-*.exe
            monitor-*.zip
            monitor-*.tar.gz

      - name: Upload to DO spaces
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY}}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: bin
          out_dir: monitor/dev/