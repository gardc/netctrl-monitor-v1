name: "create-dev-build"
on:
  workflow_dispatch:

jobs:
  package:
    strategy:
      matrix:
        platform: [ macos-latest, windows-latest ]
        go-version: [1.18]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2

      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./frontend/package.json').version")" >> $GITHUB_ENV

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - uses: actions/checkout@v2

      - name: setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: build frontend
        env:
          REACT_APP_NETCTRL_REMOTE_URL: "https://dev.netctrl.io"
        run: |
          cd frontend
          yarn
          yarn build

      - name: Get Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install gon via HomeBrew for code signing and app notarization
        if: matrix.platform == 'macos-latest'
        run: |
#          brew tap mitchellh/gon
#          brew install mitchellh/gon/gon
          curl https://github.com/mitchellh/gon/releases/download/v0.2.3/gon_macos.zip --output gon.zip
          unzip gon.zip
          rm -f ./gon.zip

      - name: Build and Sign MacOS Binaries
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        run: |
          ./build-macos.sh
        

      #      - name: Build package linux
      #        run: |
      #         export PATH=$PATH:$(go env GOPATH)/bin
      #         echo "building on ${{ matrix.os }}"
      #         echo ${{ env.GITHUB_REF }}
      #         echo ${{ env.GITHUB_HEAD_REF }}
      #         mkdir -p ~/.wails
      #         cp wails.json ~/.wails/
      #         export LOG_LEVEL=debug
      #         export GODEBUG=1
      #         wails build
      #         tar -czvf riftshare.tar.gz ./build/riftshare
      #         # wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
      #         # chmod +x linuxdeploy*.AppImage
      #         # ls ./
      #         # ./linuxdeploy*.AppImage --appdir AppDir --executable ./build/riftshare --desktop-file=riftshare.AppImage.desktop --icon-file=appicon--512.png --output appimage
      #        if: matrix.os == 'ubuntu-latest'

      - name: Build package windows
        if: matrix.platform == 'windows-latest'
        run: |
          $GP = (go env GOPATH)
          $env:path = "$env:path;$GP\bin"
          echo "building on ${{ matrix.os }}"
          choco install mingw
          choco install nsis
          wails build -platform windows/amd64 -clean -nsis
        

      - name: upload artifacts macOS
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v2
        with:
          name: monitor-macos
          path: netctrl-monitor-*.zip


      - name: upload artifact windows
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: monitor-windows
          path: .\build\bin\*.exe

  release:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Download Windows Package
        uses: actions/download-artifact@v2
        with:
          name: monitor-windows
      - name: Download macOS packages
        uses: actions/download-artifact@v2
        with:
          name: monitor-macos
#      - name: Create Release
#        id: create_release
#        uses: "marvinpinto/action-automatic-releases@latest"
#        with:
#          title: "Monitor dev build"
#          repo_token: "${{ secrets.GITHUB_TOKEN }}"
#          prerelease: false
#          files: |
#            Monitor-*.exe
#            netctrl-*.zip